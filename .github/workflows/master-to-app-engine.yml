# Based on https://github.com/actions/starter-workflows/blob/main/ci/django.yml
name: Google App Engine Deployment

on:
  # CI must pass on the master branch
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [master]
    types:
      - completed

env:
  PYTHON_TARGET: 3.11
  # Django
  DJANGO_SETTINGS_MODULE: tcf_core.settings.prod
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DEBUG: 0
  # database
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  # social-auth-app-django
  SOCIAL_AUTH_GOOGLE_OAUTH2_KEY: ${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY }}
  SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET }}
  # email for account verification
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  # review drive account information
  REVIEW_DRIVE_ID: ${{ secrets.REVIEW_DRIVE_ID }}
  REVIEW_DRIVE_EMAIL: ${{ secrets.REVIEW_DRIVE_EMAIL }}
  REVIEW_DRIVE_PASSWORD: ${{ secrets.REVIEW_DRIVE_PASSWORD }}
  # aws ecs image
  IMAGE_NAME: latest
  AWS_REGION: us-east-1                          
  ECS_SERVICE: barrett-fogle-love-v1          
  ECS_CLUSTER: tcf-fargate-cluster             
  ECS_TASK_DEFINITION: tcf-prod-task:14
  CONTAINER_IMAGE: tcf/thecourseforum2:latest
  CONTAINER_NAME: latest
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  S3_BUCKET_NAME: tcf-static-files

jobs:
  deploy:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      # A workaround because this workflow runs on the default branch (`dev`)
      # because that's how `workflow_run` works at the moment
      # https://github.community/t/workflow-run-not-working-as-expected/139342
      - name: Checkout `master`
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set up Python ${{ env.PYTHON_TARGET }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_TARGET }}

      - name: Install Python packages, excluding the unnecessary ones
        run: |
          python -m pip install --upgrade pip
          sed -i '/\(coverage\|lint\|types\-tqdm\|mypy\|black\|isort\|gunicorn\|django\-heroku\|django\-stubs\)/d' requirements.txt
          pip install -r requirements.txt

      - name: Migrations
        run: |
          python manage.py migrate

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Collect static files
        run: python3 manage.py collectstatic --noinput --clear

      - name: Upload static files to S3
        run: |
          aws s3 sync ./static/ s3://${{ env.S3_BUCKET_NAME }}/ --delete

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.CONTAINER_IMAGE }}:$(github.sha)

      - name: Add image in ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.CONTAINER_IMAGE }}$(github.sha)      
            
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true
    
