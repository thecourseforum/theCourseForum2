# Based on https://github.com/actions/starter-workflows/blob/main/ci/django.yml
name: Continuous Integration

on:
  pull_request:
    branches:
      - "*"
  # The following is needed to run tests upon direct push to dev or master
  push:
    branches: [dev, master]
env:
  PYTHON_TARGET: 3.12
  # Django
  DJANGO_SETTINGS_MODULE: tcf_core.settings.ci
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DEBUG: 1
  ENVIRONMENT: dev
  # database
  DB_NAME: tcf_db # arbitrary string
  DB_USER: postgres # default user
  DB_PASSWORD: postgres # default password
  DB_HOST: localhost # required for GitHub Actions
  DB_PORT: 5432 # default port
  # AWS Cognito
  COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
  COGNITO_APP_CLIENT_ID: ${{ secrets.COGNITO_APP_CLIENT_ID }}
  COGNITO_APP_CLIENT_SECRET: ${{ secrets.COGNITO_APP_CLIENT_SECRET }}
  COGNITO_DOMAIN: ${{ secrets.COGNITO_DOMAIN }}
  COGNITO_REGION_NAME: ${{ secrets.COGNITO_REGION_NAME }}
  # email for account verification
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  # review drive account information
  REVIEW_DRIVE_ID: ${{ secrets.REVIEW_DRIVE_ID }}
  REVIEW_DRIVE_EMAIL: ${{ secrets.REVIEW_DRIVE_EMAIL }}
  REVIEW_DRIVE_PASSWORD: ${{ secrets.REVIEW_DRIVE_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
  AWS_S3_CUSTOM_DOMAIN: ${{ secrets.AWS_S3_CUSTOM_DOMAIN }}

jobs:
  uv_lock:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Check lockfile
        run: uv lock --locked

  pylint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run pylint
        run: |
          uv run pylint --django-settings-module=${{ env.DJANGO_SETTINGS_MODULE }} --jobs=0 --load-plugins pylint_django tcf_website tcf_core

  django:
    runs-on: ubuntu-latest
    outputs:
      code-coverage: ${{ steps.coverage.outputs.percentage }}
    services:
      postgres:
        image: postgres:15.4
        env:
          POSTGRES_USER: ${{ env.DB_USER}}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Migrations & Tests
        run: |
          envsubst < .env.example > .env
          uv run manage.py migrate
          uv run coverage run manage.py test

      - name: Get code coverage
        id: coverage
        run: |
          echo "percentage=$(coverage report | grep -o '[0-9]\+%' | tail -1)" >> $GITHUB_OUTPUT

  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install npm packages
        run: npm ci

      - name: Run ESLint
        run: npx eslint -c .config/.eslintrc.yml tcf_website/static/
